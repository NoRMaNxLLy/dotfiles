#!/bin/sh
# shellcheck disable=SC3043
# a script to ask LLMs provided by pollinations.ai.
# available models at https://text.pollinations.ai/models

# a quewer is a directory that contains the prompt and the respone from
# LLM. the de

usage() {
	while read -r l; do
		echo "$l"
	done << EOF
reads prompt from stdin.

Environment variables:

model	specify the LLM model.

The list of available models located at https://text.pollinations.ai/models
EOF
}

chkdeps() {
	if ! command -v "$1" >/dev/null; then
		echo "command not found: $1" 1>&2
		return 1
	fi
}

# make OpenAI-comptabile POST message
quewer_mkreq() {
	local q="$1"
	jq -n --rawfile model "$q/model" \
		--rawfile p "$q/prompt" \
		'{
		"model": $model,
		"messages": [{"role": "user", "content": $p}],
		"private": true
	}' >"$q/req.json"
}

# send the JSON request to the endpoint, receive the response
quewer_sndreq() {
	local q="$1"
	curl -sSL -H "Content-Type: application/json" \
		-d "@$q/req.json" \
		"$endpoint" \
		>"$q/resp.json"
}

# extract the response from the JSON response
quewer_resp() {
	local q="$1"
	local filter='.choices[].message | .reasoning_content // empty, .content // empty'

	jq -r "$filter" <"$q/resp.json" >"$q/answer"
}

main() {
	local q
	q="$XDG_CACHE_HOME/$progname/$(date '+%Y%m%d%H%M%S')"

	for d in $deps; do
		chkdeps "$d" || depmiss=1
	done
	test -n "$depmiss" && exit 1

	mkdir -p "$q" || exit 1
	echo "$q" 1>&2
	printf "$model" >"$q/model"
	printf "$*" >"$q/prompt"
	test -z "$*" && cat >"$q/prompt"
	test -s "$q/prompt" || exit # exit if empty

	quewer_mkreq "$q"
	quewer_sndreq "$q" || {
		echo "$progname: failed in sending request" 1>&2
		exit 1
	}

	quewer_resp "$q"
	cat "$q/answer"
}

deps="curl jq"
endpoint="https://text.pollinations.ai/openai"
progname="${0##*/}"
: "${XDG_CACHE_HOME:=$HOME/.cache}"
: "${model:=openai-large}"

main "$*"
