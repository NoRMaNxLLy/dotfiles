#!/bin/bash

prefix_work=
prefix_break=
prefix_stop=
duration="1500"
remains=

cmds="start stop print follow"

duration_parse() {
    dur="$1"
    h=0 m=0 s=0

    if ! [[ $dur =~ h|m|s ]]; then
        printf 'missing unit in duration "%d"\n' "$dur" 1>&2
        exit 1
    fi

    # calclulate in positive. the negative sign will be added back at
    # the end of the function
    [[ ${1:0:1} == '-' ]] && dur="${dur#-}"

    if [[ $dur =~ [0-9]*h ]]; then
        h="${dur%%h*}"
        dur="${dur##*h}"
    fi

    if [[ $dur =~ [0-9]*m ]]; then
        m="${dur%%m*}"
        dur="${dur##*m}"
    fi

    if [[ $dur =~ [0-9]*s ]]; then
        s="${dur%%s*}"
        dur="${dur##*s}"
    fi

    ((duration = h * 3600 + m * 60 + s))

    [[ ${1:0:1} == '-' ]] && ((duration *= -1))
}

# report whether a timer is running
timer_running() {
	[[ -e /tmp/pomo ]] || return 1
}

# calculate the remaining seconds
timer_remains() {
	local start duration end now
	remains=

    read start duration < "/tmp/pomo"
    ((end = start + duration))
    printf -v now "%(%s)T"
    ((remains = end - now))
}

# pretty print the timer
timer_print() {
    local p=$prefix_work
    local sign=''

	((remains == 0)) && p=$prefix_stop
	((remains < 0)) && p=$prefix_break

	((remains < 0)) && {
        local sign='-'
        ((remains *= -1))
        ((remains % 2 != 0)) && p=''   # blinking effect
	}

    #((hours   = remains / 3600, remains %= 3600))
    ((minutes = remains / 60,   remains %= 60))

    printf -v l '%02d:%02d' $minutes $remains
    [[ -n $sign ]] && l="$sign$l"
	l="$p $l"

	echo "$l"
}

# print the current timer
print() {
    timer_running || {
		remains=0
		timer_print
        return
	}

	timer_remains
	timer_print
}

# start a new timer
start() {
	local d="$1"

	[[ -n $d ]] && duration_parse "$d"
	# -1 represents the current time. read bash(1).
	printf '%(%s)T %d\n' -1 "$duration" > "/tmp/pomo"
}

# stop the timer
stop() {
	rm "/tmp/pomo" 2>/dev/null
}

# keep printing the timer to stdout
follow() {
	enable sleep	# enable built-in sleep
	while :; do
		print
		sleep 1
	done
}

main() {
	local cmd="$1"

	[[ -z $cmd ]] && {
		print
		return 0
	}
	shift

	for c in $cmds; do
		[[ $c == "$cmd" ]] && {
			"$c" "$@"
			return 0
		}
	done
}

main "$@"
